The ```7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

This is an example text file in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

    >>> try:
    ...     bg.integer_validator("float_value", 3.14)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] float_value must be an integer

    >>> try:
    ...     bg.area(7)
    ... except Exception as ex:
    ...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
    [TypeError] area() takes 1 positional argument but 2 were given

    >>> try:
    ...     bg.area(None)
    ... except Exception as ex:
    ...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
    [TypeError] area() takes 1 positional argument but 2 were given

    >>> try:
    ...     bg.integer_validator('size', None)
    ... except Exception as ex:
    ...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
    [TypeError] size must be an integer

    >>> try:
    ...     bg.integer_validator('foo', [])
    ... except Exception as ex:
    ...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
    [TypeError] foo must be an integer

    >>> try:
    ...     bg.integer_validator('angle', complex(2, 3))
    ... except Exception as ex:
    ...     print('[{}] {}'.format(ex.__class__.__name__, ex.args[0]))
    [TypeError] angle must be an integer
